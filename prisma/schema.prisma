// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Disable shadowDatabaseUrl in production
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed for development
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[] 
  onboardingCompleted Boolean @default(false)
  userType UserType?
  Company       Company?
  JobSeeker     JobSeeker?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserType {
  COMPANY
  JOB_SEEKER
}

model Company{
  id String @id @default(uuid())
  name String
  location String
  about String
  logo String
  website String
  xAccount String?
  user User @relation(fields: [userId], references: [id])
  userId String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  JobPost   JobPost[]

}

model JobSeeker {
  id     String @id @default(uuid())
  name   String
  about  String
  resume String
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 

 model JobPost {
  id String @id @default(uuid())

  jobTitle        String
  employmentType  String
  location        String
  salaryFrom      Int
  salaryTo        Int
  jobDescription  String

  status       JobPostStatus @default(DRAFT)
  applications Int           @default(0)

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  
}

enum JobPostStatus {
  DRAFT
  ACTIVE
  EXPIRED
}